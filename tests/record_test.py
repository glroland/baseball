from model.play_record import PlayRecord

def test_simple_strikeout():
    s = "K"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(not r.softly_hit_ball_flag)
    assert(not r.hard_hit_ball_flag)
    assert(len(r.advances) == 0)
    assert(len(r.actions) == 1)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == s)
    assert(len(r.actions[0].groups) == 0)
    assert(len(r.actions[0].modifiers) == 0)

def test_one_defensive_out_one_modifier():
    s = "63/G"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(not r.softly_hit_ball_flag)
    assert(not r.hard_hit_ball_flag)
    assert(len(r.advances) == 0)
    assert(len(r.actions) == 1)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == "63")
    assert(len(r.actions[0].groups) == 0)
    assert(len(r.actions[0].modifiers) == 1)
    assert(r.actions[0].modifiers[0] == "G")

def test_one_play_one_advancement():
    s = "WP.2-3"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(not r.softly_hit_ball_flag)
    assert(not r.hard_hit_ball_flag)
    assert(len(r.advances) == 1)
    assert(r.advances[0].advance == "2-3")
    assert(r.advances[0].base_from == "2")
    assert(r.advances[0].base_to == "3")
    assert(r.advances[0].was_out == False)
    assert(len(r.advances[0].groups) == 0)
    assert(len(r.advances[0].groups) == 0)
    assert(len(r.actions) == 1)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == "WP")
    assert(len(r.actions[0].groups) == 0)
    assert(len(r.actions[0].modifiers) == 0)

def test_two_offenses_w_credit_and_one_modifier():
    s = "54(1)3/GDP"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(not r.softly_hit_ball_flag)
    assert(not r.hard_hit_ball_flag)
    assert(len(r.advances) == 0)
    assert(len(r.actions) == 2)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == "54")
    assert(len(r.actions[0].groups) == 1)
    assert(r.actions[0].groups[0] == "1")
    assert(len(r.actions[0].modifiers) == 1)
    assert(r.actions[0].modifiers[0] == "GDP")
    assert(r.actions[1].action == "3")
    assert(len(r.actions[1].groups) == 0)
    assert(len(r.actions[1].modifiers) == 0)

def test_one_defensive_out_one_long_modifier():
    s = "3/P3F"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(not r.softly_hit_ball_flag)
    assert(not r.hard_hit_ball_flag)
    assert(len(r.advances) == 0)
    assert(len(r.actions) == 1)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == "3")
    assert(len(r.actions[0].groups) == 0)
    assert(len(r.actions[0].modifiers) == 1)
    assert(r.actions[0].modifiers[0] == "P3F")

def test_homerun_with_multiple_modifiers():
    s = "HR/7/F"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(not r.softly_hit_ball_flag)
    assert(not r.hard_hit_ball_flag)
    assert(len(r.advances) == 0)
    assert(len(r.actions) == 1)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == "HR")
    assert(len(r.actions[0].groups) == 0)
    assert(len(r.actions[0].modifiers) == 2)
    assert(r.actions[0].modifiers[0] == "7")
    assert(r.actions[0].modifiers[1] == "F")

def test_out_multi_mods_multi_advs():
    s = "52(3)/FO/G.2-3;1-2"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(not r.softly_hit_ball_flag)
    assert(not r.hard_hit_ball_flag)
    assert(len(r.advances) == 2)
    assert(r.advances[0].advance == "2-3")
    assert(r.advances[0].base_from == "2")
    assert(r.advances[0].base_to == "3")
    assert(r.advances[0].was_out == False)
    assert(len(r.advances[0].groups) == 0)
    assert(r.advances[1].advance == "1-2")
    assert(r.advances[1].base_from == "1")
    assert(r.advances[1].base_to == "2")
    assert(r.advances[1].was_out == False)
    assert(len(r.advances[1].groups) == 0)
    assert(len(r.actions) == 1)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == "52")
    assert(len(r.actions[0].groups) == 1)
    assert(r.actions[0].groups[0] == "3")
    assert(len(r.actions[0].modifiers) == 2)
    assert(r.actions[0].modifiers[0] == "FO")
    assert(r.actions[0].modifiers[1] == "G")

def test_grounder_softly_hit_with_advance():
    s = "S5/G-.1-2"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(r.softly_hit_ball_flag)
    assert(not r.hard_hit_ball_flag)
    assert(len(r.advances) == 1)
    assert(r.advances[0].advance == "1-2")
    assert(r.advances[0].base_from == "1")
    assert(r.advances[0].base_to == "2")
    assert(r.advances[0].was_out == False)
    assert(len(r.advances[0].groups) == 0)
    assert(len(r.actions) == 1)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == "S5")
    assert(len(r.actions[0].groups) == 0)
    assert(len(r.actions[0].modifiers) == 1)
    assert(r.actions[0].modifiers[0] == "G")

def test_single_softly_hit_fly():
    s = "S8/F-"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(r.softly_hit_ball_flag)
    assert(len(r.advances) == 0)
    assert(len(r.actions) == 1)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == "S8")
    assert(len(r.actions[0].groups) == 0)
    assert(len(r.actions[0].modifiers) == 1)
    assert(r.actions[0].modifiers[0] == "F")

def test_multi_advs_w_adv_modifier():
    s = "W.3-H(UR);2-3;1-2"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(not r.softly_hit_ball_flag)
    assert(not r.hard_hit_ball_flag)
    assert(len(r.advances) == 3)
    assert(r.advances[0].advance == "3-H")
    assert(r.advances[0].base_from == "3")
    assert(r.advances[0].base_to == "H")
    assert(r.advances[0].was_out == False)
    assert(len(r.advances[0].groups) == 1)
    assert(r.advances[0].groups[0] == "UR")
    assert(r.advances[1].advance == "2-3")
    assert(r.advances[1].base_from == "2")
    assert(r.advances[1].base_to == "3")
    assert(r.advances[1].was_out == False)
    assert(len(r.advances[1].groups) == 0)
    assert(r.advances[2].advance == "1-2")
    assert(r.advances[2].base_from == "1")
    assert(r.advances[2].base_to == "2")
    assert(r.advances[2].was_out == False)
    assert(len(r.advances[2].groups) == 0)
    assert(len(r.actions) == 1)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == "W")
    assert(len(r.actions[0].groups) == 0)
    assert(len(r.actions[0].modifiers) == 0)

def test_single_hard_hit_two_advances():
    s = "S8/L+.3-H;2-3"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(not r.softly_hit_ball_flag)
    assert(r.hard_hit_ball_flag)
    assert(len(r.advances) == 2)
    assert(r.advances[0].advance == "3-H")
    assert(r.advances[0].base_from == "3")
    assert(r.advances[0].base_to == "H")
    assert(r.advances[0].was_out == False)
    assert(len(r.advances[0].groups) == 0)
    assert(r.advances[1].advance == "2-3")
    assert(r.advances[1].base_from == "2")
    assert(r.advances[1].base_to == "3")
    assert(r.advances[1].was_out == False)
    assert(len(r.advances[1].groups) == 0)
    assert(len(r.actions) == 1)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == "S8")
    assert(len(r.actions[0].groups) == 0)
    assert(len(r.actions[0].modifiers) == 1)
    assert(r.actions[0].modifiers[0] == "L")

def test_double_hard_hit_two_advances_with_out():
    s = "D7/L+.2-H;1X2(75)"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(not r.softly_hit_ball_flag)
    assert(r.hard_hit_ball_flag)
    assert(len(r.advances) == 2)
    assert(r.advances[0].advance == "2-H")
    assert(r.advances[0].base_from == "2")
    assert(r.advances[0].base_to == "H")
    assert(r.advances[0].was_out == False)
    assert(len(r.advances[0].groups) == 0)
    assert(r.advances[1].advance == "1X2")
    assert(r.advances[1].base_from == "1")
    assert(r.advances[1].base_to == "2")
    assert(r.advances[1].was_out == True)
    assert(len(r.advances[1].groups) == 1)
    assert(r.advances[1].groups[0] == "75")
    assert(len(r.actions) == 1)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == "D7")
    assert(len(r.actions[0].groups) == 0)
    assert(len(r.actions[0].modifiers) == 1)
    assert(r.actions[0].modifiers[0] == "L")

def test_double_hard_hit_two_adv_one_out_one_safe_both_w_mods():
    s = "D8/L+.1XH(862/TH);B-3(TH)"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(not r.softly_hit_ball_flag)
    assert(r.hard_hit_ball_flag)
    assert(len(r.advances) == 2)
    assert(r.advances[0].advance == "1XH")
    assert(r.advances[0].base_from == "1")
    assert(r.advances[0].base_to == "H")
    assert(r.advances[0].was_out == True)
    assert(len(r.advances[0].groups) == 1)
    assert(r.advances[0].groups[0] == "862/TH")
    assert(r.advances[1].advance == "B-3")
    assert(r.advances[1].base_from == "B")
    assert(r.advances[1].base_to == "3")
    assert(r.advances[1].was_out == False)
    assert(len(r.advances[1].groups) == 1)
    assert(r.advances[1].groups[0] == "TH")
    assert(len(r.actions) == 1)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == "D8")
    assert(len(r.actions[0].groups) == 0)
    assert(len(r.actions[0].modifiers) == 1)
    assert(r.actions[0].modifiers[0] == "L")

def test_out_multi_mods_multi_adv_multi_groups_and_out():
    s = "36(1)/FO/G.3-H(UR)(NR);BX2(6E1)"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(not r.softly_hit_ball_flag)
    assert(not r.hard_hit_ball_flag)
    assert(len(r.advances) == 2)
    assert(r.advances[0].advance == "3-H")
    assert(r.advances[0].base_from == "3")
    assert(r.advances[0].base_to == "H")
    assert(r.advances[0].was_out == False)
    assert(len(r.advances[0].groups) == 2)
    assert(r.advances[0].groups[0] == "UR")
    assert(r.advances[0].groups[1] == "NR")
    assert(r.advances[1].advance == "BX2")
    assert(r.advances[1].base_from == "B")
    assert(r.advances[1].base_to == "2")
    assert(r.advances[1].was_out == True)
    assert(len(r.advances[1].groups) == 1)
    assert(r.advances[1].groups[0] == "6E1")
    assert(len(r.actions) == 1)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == "36")
    assert(len(r.actions[0].groups) == 1)
    assert(r.actions[0].groups[0] == "1")
    assert(len(r.actions[0].modifiers) == 2)
    assert(r.actions[0].modifiers[0] == "FO")
    assert(r.actions[0].modifiers[1] == "G")

def test_single_hard_two_adv_one_mod():
    s = "S7/L+.3-H;1-3(E7)"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(not r.softly_hit_ball_flag)
    assert(r.hard_hit_ball_flag)
    assert(len(r.advances) == 2)
    assert(r.advances[0].advance == "3-H")
    assert(r.advances[0].base_from == "3")
    assert(r.advances[0].base_to == "H")
    assert(r.advances[0].was_out == False)
    assert(len(r.advances[0].groups) == 0)
    assert(r.advances[1].advance == "1-3")
    assert(r.advances[1].base_from == "1")
    assert(r.advances[1].base_to == "3")
    assert(r.advances[1].was_out == False)
    assert(len(r.advances[1].groups) == 1)
    assert(r.advances[1].groups[0] == "E7")
    assert(len(r.actions) == 1)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == "S7")
    assert(len(r.actions[0].groups) == 0)
    assert(len(r.actions[0].modifiers) == 1)
    assert(r.actions[0].modifiers[0] == "L")

def test_E_three_advs_with_2_groups():
    s = "E5/G.3-H;2-H(NR)(UR);1-3"

    r = PlayRecord.create(s)
    assert(r != None)
    assert(not r.uncertainty_flag)
    assert(not r.exceptional_play_flag)
    assert(not r.softly_hit_ball_flag)
    assert(not r.hard_hit_ball_flag)
    assert(len(r.advances) == 3)
    assert(r.advances[0].advance == "3-H")
    assert(r.advances[0].base_from == "3")
    assert(r.advances[0].base_to == "H")
    assert(r.advances[0].was_out == False)
    assert(len(r.advances[0].groups) == 0)
    assert(r.advances[1].advance == "2-H")
    assert(r.advances[1].base_from == "2")
    assert(r.advances[1].base_to == "H")
    assert(r.advances[1].was_out == False)
    assert(len(r.advances[1].groups) == 2)
    assert(r.advances[1].groups[0] == "NR")
    assert(r.advances[1].groups[1] == "UR")
    assert(r.advances[2].advance == "1-3")
    assert(r.advances[2].base_from == "1")
    assert(r.advances[2].base_to == "3")
    assert(r.advances[2].was_out == False)
    assert(len(r.advances[2].groups) == 0)
    assert(len(r.actions) == 1)
    assert(r.actions[0] != None)
    assert(r.actions[0].action == "E5")
    assert(len(r.actions[0].groups) == 0)
    assert(len(r.actions[0].modifiers) == 1)
    assert(r.actions[0].modifiers[0] == "G")
